ztem <- h %*% x
size <- centroid.size(x)
z <- ztem/size
}
}
z
}
# realtocomplex
realtocomplex = function (x){
k <- nrow(x)
zstar <- x[, 1] + (0+1i) * x[, 2]
zstar
}
# Enormalize
Enormalize = function (x){
return(x/Enorm(x))
}
# Enorm
Enorm = function (X){
if (is.complex(X)) {
n <- sqrt(Re(c(st(X) %*% X)))
}
else {
n <- sqrt(sum(diag(t(X) %*% X)))
}
n
}
st = function (zstar)
{
st <- t(Conj(zstar))
st
}
defh = function (nrow)
{
k <- nrow
h <- matrix(0, k, k + 1)
j <- 1
while (j <= k) {
jj <- 1
while (jj <= j) {
h[j, jj] <- -1/sqrt(j * (j + 1))
jj <- jj + 1
}
h[j, j + 1] <- j/sqrt(j * (j + 1))
j <- j + 1
}
h
}
shape_proc_distance <- function (x, type = "full", reflect = FALSE){
distances = vector()
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
if (type == "full") {
distances[i] = sin(riemdist(x[,,x_ref], x[,,y_ref], reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x[x_ref], x[,,y_ref], reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x[x_ref], x[,,y_ref], reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x[,,x_ref], x[,,y_ref], reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
distances
}
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_proc_distance(bones, type = "full")
shape_elastic_distance(bones, mode = "C")
elastic.distance(bone_1, bone_2, mode = "C")
elastic.distance(bone_1, bone_2)
calc_shape_distance(bone_1, bone_2, mode = "C")
library(fdasrvf)
calc_shape_dist(bone_1, bone_2, mode = "C")
calc_shape_dist(t(bone_1), t(bone_2), mode = "C")
??registr
library(help = registr)
devtools::install_github("/julia-wrobel/registr")
devtools::install_github("julia-wrobel/registr")
?registr
??registr
library(registr)
devtools::install_github("julia-wrobel/registr")
library(registr)
??registr
help("registr")
help("shape_proc_distance")
library(shipshape)
devtools
devtools::install_github("goutham1220/shipshape")
library(shipshape)
library(help = shapes)
??procdist
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
# Enorm
Enorm = function (X){
if (is.complex(X)) {
n <- sqrt(Re(c(st(X) %*% X)))
}
else {
n <- sqrt(sum(diag(t(X) %*% X)))
}
n
}
Enormalize = function (x){
return(x/Enorm(x))
}
# realtocomplex
realtocomplex = function (x){
k <- nrow(x)
zstar <- x[, 1] + (0+1i) * x[, 2]
zstar
}
preshape = function (x){
if (is.complex(x)) {
k <- nrow(as.matrix(x))
h <- defh(k - 1)
zstar <- x
ztem <- h %*% zstar
size <- sqrt(diag(Re(st(ztem) %*% ztem)))
if (is.vector(zstar))
z <- ztem/size
if (is.matrix(zstar))
z <- ztem %*% diag(1/size)
}
else {
if (length(dim(x)) == 3) {
k <- dim(x)[1]
h <- defh(k - 1)
n <- dim(x)[3]
m <- dim(x)[2]
z <- array(0, c(k - 1, m, n))
for (i in 1:n) {
z[, , i] <- h %*% x[, , i]
size <- centroid.size(x[, , i])
z[, , i] <- z[, , i]/size
}
}
else {
k <- nrow(as.matrix(x))
h <- defh(k - 1)
ztem <- h %*% x
size <- centroid.size(x)
z <- ztem/size
}
}
z
}
riemdist <- function (x, y, reflect = FALSE){
if (sum((x - y)^2) == 0) {
riem <- 0
}
if (sum((x - y)^2) != 0) {
if (reflect == FALSE) {
if (ncol(as.matrix(x)) < 3) {
if (is.complex(x) == FALSE) {
x <- realtocomplex(x)
}
if (is.complex(y) == FALSE) {
y <- realtocomplex(y)
}
riem <- c(acos(min(1, (Mod(st(preshape(x)) %*%
preshape(y))))))
}
else {
m <- ncol(x)
z <- preshape(x)
w <- preshape(y)
Q <- t(z) %*% w %*% t(w) %*% z
ev <- eigen(t(z) %*% w)$values
check <- 1
for (i in 1:m) {
check <- check * ev[i]
}
ev <- sqrt(abs(eigen(Q, symmetric = TRUE)$values))
if (Re(check) < 0)
ev[m] <- -ev[m]
riem <- acos(min(sum(ev), 1))
}
}
if (reflect == TRUE) {
m <- ncol(x)
z <- preshape(x)
w <- preshape(y)
Q <- t(z) %*% w %*% t(w) %*% z
ev <- sqrt(abs(eigen(Q, symmetric = TRUE)$values))
riem <- acos(min(sum(ev), 1))
}
}
riem
}
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
shape_proc_distance(bone_shapes, type = "full")
bone_shapes
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_shapes
dim(bone_shapes)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bones = aperm(`dim<-`(t(bone_shapes), list(100, 2, (dim(bone_shapes)[1]/nrow(bone_shapes)))), c(2, 1, 3))
bones = aperm(`dim<-`(t(bone_shapes), list(100, 2, (dim(bone_shapes)[1]/nrow(bone_shapes)))), c(2, 1, 3))
dim(bone_shapes)[1]/nrow(bone_shapes))
dim(bone_shapes)[1]/nrow(bone_shapes)
dim(bone_shapes)[1]
id
bones = aperm(`dim<-`(t(bone_shapes), list(100, 2, 100)), c(2, 1, 3))
??calc_shape_dist
library(help = fdasrvf)
library(help = "shapes")
install.packages("lintr")
lintr::lint_package()
cl
cls
require("shape_proc_distance.R")
load("shape_proc_distance.R")
load("shape_proc_distance.R")
load("shape_proc_distance")
devtools::load_all()
warning()
warnings()
shape_elastic_distance <- function(x, mode = "C"){
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
distances[i] = fxn$d
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances)
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance <- function(x, mode = "C"){
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
distances[i] = fxn$d
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances$dist)
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance <- function(x, mode = "C"){
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode)
distances[i] = fxn$d
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances)
}
shape_elastic_distance(bones, mode = "C")
shape_proc_distance(bones, type = "full")
shape_proc_distance(bones, type = "partial")
x_val
shape_proc_distance(bones, type = "Riemannian")
shape_proc_distance(bones, type = "sizeandshape")
procdist(bone_1, bone_2, type = "partial")
shape_proc_distance(bones, type = "partial")
?read.xlsx
??read.xlsx
install.packages("readxl")
library(readxl)
url = paste0("http://niti.gov.in/file/", 197, "download?token=token=x1Y_48Gj")
url
url = paste0("http://niti.gov.in/file/", 197, "download?token=x1Y_48Gj")
read.xlsx(url(url))
library(help = "readxl")
read_excel(url(url))
read_excel(url)
read.csv(url(url))
url = paste0("http://niti.gov.in/file/", 197, "/", "download?token=x1Y_48Gj")
read.csv(url(url))
url = paste0("http://niti.gov.in/file/", 195, "/", "download?token=x1Y_48Gj")
read.csv(url(url))
bone_shapes <- bone_list$x
bone_shapes <- cbind(bone_shapes, bone_list$y)
bone_1 <- bone_shapes[1:100, ]
bone_2 <- bone_shapes[101:200, ]
bone_3 <- bone_shapes[201:300, ]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
install.packages("registr")
document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
bones = bone_list
load_bones_data <- function(){
bones = bone_list
return(bones)
}
bones_shapes = load_bones_data()
bones_shapes = bones_shapes$x
devtools::document()
devtools::document()
Q
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(shipshape)
library(help = shipshape)
shape_proc_distance(bones, type = "full")
??shape_proc_distance
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
shape_proc_distance(bones)
shape_proc_distance(bone_list)
bones_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
bones
shape_proc_distance(bones)
shape_proc_distance(bones, type = "full")
Q
getAnywhere(st)
devtools::document()
devtools::install()
library(shipshape)
bone_shapes = load_bones_data()
bone_shapes = bones_shapes$x
bone_shapes
bone_shapes = bones_shapes[id==1]
bone_shapes = bones_shapes[names[1] == 1]
names[1]
names
names(bones_shapes)
bone_shapes = load_bones_data()$x
bone_shapes
bone_shapes = cbind(load_bones_data()$x, load_bones_data()$y)
bone_shapes
bone_shapes = as.matrix(load_bones_data())
bone_shapes
bone_shapes = as.numeric(as.matrix(load_bones_data()))
bone_shapes
bone_shapes = as.numeric(as.matrix(c(load_bones_data()$x, load_bones_data()$y)))
bone_shapes
bone_shapes = cbind(load_bones_data()$x, load_bones_data()$y)
bone_shapes
?split
bone_shapes = as.matrix.data.frame(load_bones_data())
bone_shapes
bones = split(bone_shapes, bone_shapes[1])
bones
bone_shapes = load_bones_data()
bone_shapes
devtools::document()
devtools::install()
load_bones_data <- function(){
bone_shapes = cbind(bone_list$x, bone_list$y)
bones <- aperm(`dim<-`(t(bone_shapes),
list(100, 2, nrow(bone_shapes)/100)), #dimensions of the 3d array
c(2,1,3))
return(bone_shapes)
}
load_bones_data()
cls
devtools::document()
devtools::install()
shape_elastic_distance(bones)
getAnywhere(load.Rdata)
library(help = miceadds)
devtools::document()
devtools::load_all()
load_bones_data()
library(help = fdasrvf)
library(R.matlab)
library(ggplot2)
diffShapes = readMat('data/DifferentSample.mat')
x2 = diffShapes$A1[1, , 1]
diffShapes = readMat('data/DifferentSample.mat')
diffShapes = readMat('c:/users/gouth/shapes/data/DifferentSample.mat')
x2 = diffShapes$A1[1, , 1]
y2 = diffShapes$A1[2, , 1]
x2
plot(x2, y2)
library(fdasrvf)
sample_shapes
sample_shapes()
?sample_shapes()
beta
plot(beta)
load("C:/Users/gouth/shapes/rdata/aligned_curves.RData")
aligned_curves
plot(aligned_curves$V1, aligned_curves$V2)
source('C:/Users/gouth/shipshape/R/data_merge.R')
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100])
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]) + 1:index*(i+1)]
}
return(arr)
}
test = data_split(bone_shapes, 100)
devtools::document()
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]) + 1:index*(i+1)]
}
return(arr)
}
test = data_split(bone_shapes, 100)
Q
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]) + 1:index*(i+1)]
}
return(arr)
}
test = data_split(bone_shapes, 100)
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]):(index*(i+1)),]
}
return(arr)
}
test = data_split(bone_shapes, 100)
?matrix
matrix = matrix(1:1000, nrow = 500, ncol=2)
matrix
interval = 100
index = nrow(matrix)/interval
index
factor = 1:10
factor = 1:index
arr = array(matrix[1:100], dim=c(100, 2, index))
arr
interval = 100
index = nrow(matrix)/interval
factor = 1:index
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 2:index){
arr[,,i] = matrix[(100 * factor[i])+1:(interval*(i+1)),]
}
arr[,,1]
matrix
devtools::document()
devtools::load_all()
devtools::install_github("/goutham1220/shipshape")
devtools::install_github("goutham1220/shipshape")
library(devtools)
check()
getAnywhere(inverse_exp_coord())
devtools::document()
install()
check()
document()
document()
getAnywhere(inverse_exp_coord())
getAnywhere(inverse_exp_coord())[2]
document()
install()
check()
document()
load_all()
install()
.GlobalEnv
check()
document()
install()
check()
document
document()
install()
install()
install(shipshape)
install("shipshape")
