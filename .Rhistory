}
ndims = function (x)
{
return(length(dim(x)))
}
ndims = function (x)
{
return(length(dim(x)))
}
out = sum(diff(x) * (y[-M] + y[-1])/2)
trapz = function (x, y, dims = 1)
{
if ((dims - 1) > 0) {
perm = c(dims:max(ndims(y), dims), 1:(dims - 1))
}
else {
perm = c(dims:max(ndims(y), dims))
}
if (ndims(y) == 0) {
m = 1
}
else {
if (length(x) != dim(y)[dims])
stop("Dimension Mismatch")
y = aperm(y, perm)
m = nrow(y)
}
if (m == 1) {
M = length(y)
out = sum(diff(x) * (y[-M] + y[-1])/2)
}
else {
slice1 = y[as.vector(outer(1:(m - 1), dim(y)[1] * (1:prod(dim(y)[-1]) -
1), "+"))]
dim(slice1) = c(m - 1, length(slice1)/(m - 1))
slice2 = y[as.vector(outer(2:m, dim(y)[1] * (1:prod(dim(y)[-1]) -
1), "+"))]
dim(slice2) = c(m - 1, length(slice2)/(m - 1))
out = t(diff(x)) %*% (slice1 + slice2)/2
siz = dim(y)
siz[1] = 1
out = array(out, siz)
perm2 = rep(0, length(perm))
perm2[perm] = 1:length(perm)
out = aperm(out, perm2)
ind = which(dim(out) != 1)
out = array(out, dim(out)[ind])
}
return(out)
}
pvecnorm = function (v, p = 2)
{
sum(abs(v)^p)^(1/p)
}
calculatecentroid = function (beta)
{
n = nrow(beta)
T1 = ncol(beta)
betadot = apply(beta, 1, gradient, 1/(T1 - 1))
betadot = t(betadot)
normbetadot = apply(betadot, 2, pvecnorm, 2)
integrand = matrix(0, n, T1)
for (i in 1:T1) {
integrand[, i] = beta[, i] * normbetadot[i]
}
scale = trapz(seq(0, 1, length.out = T1), normbetadot)
centroid = trapz(seq(0, 1, length.out = T1), integrand, 2)/scale
return(centroid)
}
inverse_exp_coord = function (beta1, beta2, mode = "O", rotated = T)
{
T1 = ncol(beta1)
centroid1 = calculatecentroid(beta1)
dim(centroid1) = c(length(centroid1), 1)
beta1 = beta1 - repmat(centroid1, 1, T1)
centroid2 = calculatecentroid(beta2)
dim(centroid2) = c(length(centroid2), 1)
beta2 = beta2 - repmat(centroid2, 1, T1)
q1 = curve_to_q(beta1)
if (mode == "C") {
isclosed = TRUE
}
out = reparam_curve(beta1, beta2, rotated = rotated, isclosed = isclosed,
mode = mode)
if (mode == "C")
beta2 = shift_f(beta2, out$tau)
beta2 = out$R %*% beta2
gamI = invertGamma(out$gam)
beta2 = group_action_by_gamma_coord(beta2, gamI)
if (rotated) {
out = find_rotation_seed_coord(beta1, beta2, mode)
q2n = curve_to_q(out$beta2new)
}
else {
q2n = curve_to_q(beta2)
}
if (mode == "C") {
q2n = project_curve(q2n)
}
q1dotq2 = innerprod_q2(q1, q2n)
if (q1dotq2 > 1) {
q1dotq2 = 1
}
dist = acos(q1dotq2)
u = q2n - q1dotq2 * q1
normu = sqrt(innerprod_q2(u, u))
if (normu > 1e-04) {
v = u * acos(q1dotq2)/normu
}
else {
v = matrix(0, nrow(beta1), T1)
}
return(list(v = v, dist = dist))
}
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
f1 = bones[,,x_ref]
f2 = bones[,,y_ref]
distances = c(distances, inverse_exp_coord(f1, f2, mode))
}
getAnywhere(curve_to_q)
curve_to_q = function (beta)
{
n = nrow(beta)
T1 = ncol(beta)
v = apply(beta, 1, gradient, 1/(T1 - 1))
v = t(v)
q = matrix(0, n, T1)
for (i in 1:T1) {
L = sqrt(pvecnorm(v[, i], 2))
if (L > 1e-04) {
q[, i] = v[, i]/L
}
else {
q[, i] = v[, i] * 1e-04
}
}
q = q/sqrt(innerprod_q2(q, q))
return(q)
}
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
f1 = bones[,,x_ref]
f2 = bones[,,y_ref]
distances = c(distances, inverse_exp_coord(f1, f2, mode))
}
curve_to_q = function (beta)
{
n = nrow(beta)
T1 = ncol(beta)
v = apply(beta, 1, gradient, 1/(T1 - 1))
v = t(v)
q = matrix(0, n, T1)
for (i in 1:T1) {
L = sqrt(pvecnorm(v[, i], 2))
if (L > 1e-04) {
q[, i] = v[, i]/L
}
else {
q[, i] = v[, i] * 1e-04
}
}
q = q/sqrt(innerprod_q2(q, q))
return(q)
}
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
f1 = bones[,,x_ref]
f2 = bones[,,y_ref]
distances = c(distances, inverse_exp_coord(f1, f2, mode))
}
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
curve_to_q = function (beta)
{
n = nrow(beta)
T1 = ncol(beta)
v = apply(beta, 1, gradient, 1/(T1 - 1))
v = t(v)
q = matrix(0, n, T1)
for (i in 1:T1) {
L = sqrt(pvecnorm(v[, i], 2))
if (L > 1e-04) {
q[, i] = v[, i]/L
}
else {
q[, i] = v[, i] * 1e-04
}
}
q = q/sqrt(innerprod_q2(q, q))
return(q)
}
ndims = function (x)
{
return(length(dim(x)))
}
pvecnorm = function (v, p = 2)
{
sum(abs(v)^p)^(1/p)
}
calculatecentroid = function (beta)
{
n = nrow(beta)
T1 = ncol(beta)
betadot = apply(beta, 1, gradient, 1/(T1 - 1))
betadot = t(betadot)
normbetadot = apply(betadot, 2, pvecnorm, 2)
integrand = matrix(0, n, T1)
for (i in 1:T1) {
integrand[, i] = beta[, i] * normbetadot[i]
}
scale = trapz(seq(0, 1, length.out = T1), normbetadot)
centroid = trapz(seq(0, 1, length.out = T1), integrand, 2)/scale
return(centroid)
}
inverse_exp_coord = function (beta1, beta2, mode = "O", rotated = T)
{
T1 = ncol(beta1)
centroid1 = calculatecentroid(beta1)
dim(centroid1) = c(length(centroid1), 1)
beta1 = beta1 - repmat(centroid1, 1, T1)
centroid2 = calculatecentroid(beta2)
dim(centroid2) = c(length(centroid2), 1)
beta2 = beta2 - repmat(centroid2, 1, T1)
q1 = curve_to_q(beta1)
if (mode == "C") {
isclosed = TRUE
}
out = reparam_curve(beta1, beta2, rotated = rotated, isclosed = isclosed,
mode = mode)
if (mode == "C")
beta2 = shift_f(beta2, out$tau)
beta2 = out$R %*% beta2
gamI = invertGamma(out$gam)
beta2 = group_action_by_gamma_coord(beta2, gamI)
if (rotated) {
out = find_rotation_seed_coord(beta1, beta2, mode)
q2n = curve_to_q(out$beta2new)
}
else {
q2n = curve_to_q(beta2)
}
if (mode == "C") {
q2n = project_curve(q2n)
}
q1dotq2 = innerprod_q2(q1, q2n)
if (q1dotq2 > 1) {
q1dotq2 = 1
}
dist = acos(q1dotq2)
u = q2n - q1dotq2 * q1
normu = sqrt(innerprod_q2(u, u))
if (normu > 1e-04) {
v = u * acos(q1dotq2)/normu
}
else {
v = matrix(0, nrow(beta1), T1)
}
return(list(v = v, dist = dist))
}
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
f1 = bones[,,x_ref]
f2 = bones[,,y_ref]
distances = c(distances, inverse_exp_coord(f1, f2, mode))
}
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
library(fdasrvf)
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
f1 = bones[,,x_ref]
f2 = bones[,,y_ref]
distances = c(distances, fdasrvf::inverse_exp_coord(f1, f2, mode))
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
distances
calc_shape_dist
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
distances = c(distances, fdasrvf::inverse_exp_coord(f1, f2, mode))
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
distances
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
distances = c(distances, fdasrvf:::inverse_exp_coord(f1, f2, mode))
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
distances
}
shape_elastic_distance(bones, mode = "C")
calc_shape_dist(bone_1, bone_2, mode = "C")
calc_shape_dist(bone_1, bone_2, mode = "C")
calc_shape_dist(bone_1, bone_2, mode = "C")
library(fdasrvf)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
distances = c(distances, fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode))
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
distances
}
shape_elastic_distance(bones, mode = "C")
# shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
distances = c(distances, fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode))
}
f1
t(f1)
t(bone_1)
x[,,y_ref]
f1 = x[,,x_ref]
f1
distances = c(distances, fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C"))
distances
fda_srvf:::inverse_exp_coord()
fdasrvf:::inverse_exp_coord()
?fdasrvf:::inverse_exp_coord()
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
distances = c(distances, fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")$dist)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
distances
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
distances = c(distances, fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")$dist)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
return(distances[[1:dim(x[3])]])
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
distances = c(distances, fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")$dist)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
return(distances[[1]])
}
shape_elastic_distance(bones, mode = "C")
fdasrvf:::inverse_exp_coord
library(fdasrvf)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
return(distances$`1 2`)
}
shape_elastic_distance(bones, mode = "C")
library(fdasrvf)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
distance = vector()
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
return(distances$`1 2`)
}
shape_elastic_distance(bones, mode = "C")
library(fdasrvf)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
distance = vector()
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
return(distances)
}
shape_elastic_distance(bones, mode = "C")
library(fdasrvf)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
distance = vector()
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances)
}
shape_elastic_distance(bones, mode = "C")
library(fdasrvf)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
shape_elastic_distance = function(x, mode = "C"){
distance = vector()
for(i in 1:dim(bones)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
t(f1)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances$dist)
}
shape_elastic_distance(bones, mode = "C")
