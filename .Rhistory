shape_proc_distance(bones, type = "partial")
Q
??riemdist
getAnywhere("riemdist")
library(shapes)
library("shapes")
install.packages("shapes")
getAnywhere("riemdist")
library(shapes)
riemdist
library(help = shapes)
bone_1[1:100,]
bone_1[1]
bone_1[1:100]
bone_1[][1:100]
bone_1[101:200]
procdist(bone_1, bone_2, type = "partial")
procdist
?procdist
shape_proc_distance(bones, type = "Riemannian")
shape_proc_distance(bones, type = "sizeandshape")
procdist(bone_1, bone_2, type = "sizeandshape")
procdist(bone_2, bone_1, type = "sizeandshape")
shape_proc_distance(bones, type = "partial")
getAnywhere("realtocomplex")
getAnywhere("realtocomplex")[1]
bones[1,]
bones[,2]
bones
riemdist = getFromNamespace("riemdist", "shapes")
ssriemdist = getFromNamespace("ssriemdist", "shapes")
distances = vector()
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
x_ref
y_ref
x_val <- x[,,x_ref]
x_val <- bones[,,x_ref]
x_val
riemdist
realtocomplex
bone_1[,1]
bone_1[,2]
procdist(bone_1, bone_2, type = "partial")
shape_proc_distance(bones, type = "partial")
?procGPA
riemdist
realtocomplex
realtocomplex(bone_1)
remove.packages("shapes")
devtools::load_all()
shape_proc_distance(bones, type = "partial", reflect = TRUE)
library(shipshape)
shape_proc_distance(bones, type = "partial")
shape_proc_distance(bones, type = "Riemannian")
distances = vector()
x = bones
x = bones
x = bones
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
type = "full"
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
reflect = FALSE
distances = vector()
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
i = 1
x_ref = combn(dim(x)[3], 2)[1,i]
x_ref
y_ref = combn(dim(x)[3], 2)[2,i]
y_ref
combn(dim(x)[3], 2)[1,i]
combn(dim(x)[3], 2)
x_ref
x_val <- x[,,x_ref]
x_val
library(shapes)
x_val
i = 1
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
type = "Riemannian"
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
rm(list = ls())
bone_shapes = bones_list$x
library(shipshape)
bone_shapes = bones_list$x
load("C:/Users/gouth/shipshape/data/bone_list.RData")
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
x = bones
type = "Riemannian"
reflect = FALSE
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
distances = vector()
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
devtools::document()
shape_proc_distance <- function (x, type = "full", reflect = FALSE){
distances = vector()
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
distances
}
x = bones
type = "Riemannian"
reflect = FALSE
shape_proc_distance(x, type, reflect)
install.packages("shapes")
procdist(x, type, reflect)
library(help = shapes)
procdist(bones, type = "Riemannian", reflect = FALSE)
library(shapes)
procdist(bones, type = "Riemannian", reflect = FALSE)
procdist(bone_1, bone_2, type = "Riemannian", reflect = FALSE)
remove.packages("shapes")
remove.packages("shipshape")
devtools::document()
devtools::check()
getAnywhere(ssriemdist)
devtools::document()
getAnywhere(calculatecentroid)
remove.packages(shapes)
remove.packages('shapes')
getAnywhere("find_rotation_seed_coord")
getAnywhere("group_action_by_gamma_coord")
getAnywhere("innerprod_q2")
devtools::document()
installed.packages()
rs.restartR()
.rs.restartR()
library(devtools)
document()
getAnywhere("project_curve")
getAnywhere("shift_f")
getAnywhere("repmat")
getAnywhere("curve_to_q")
getAnywhere("invertGamma")
getAnywhere("reparam_curve")
document()
check()
document()
check()
load_all()
shape_proc_distance(bones, type = "partial")
shape_proc_distance(bones, type = "Riemannian")
shape_elastic_distance(bones, mode = "C")
calc_shape_dist
calc_shape_dist(bone_1, bone_2, mode = "C")
calc_shape_dist(t(bone_1), t(bone_2), mode = "C")
shape_elastic_distance(bones, mode = "C")
dist[1] = procdist(bone_1, bone_2, type ="full")
dist[2] = procdist(bone_1, bone_2, type ="partial")
install.packages("shapes")
dist[1] = procdist(bone_1, bone_2, type ="full")
dist[2] = procdist(bone_1, bone_2, type ="partial")
dist[3] = procdist(bone_1, bone_2, type ="Riemannian")
dist[4] = procdist(bone_1, bone_2, type ="sizeandshape")
library(shapes)
dist[1] = procdist(bone_1, bone_2, type ="full")
dist[2] = procdist(bone_1, bone_2, type ="partial")
dist[4] = procdist(bone_1, bone_2, type ="sizeandshape")
dist[3] = procdist(bone_1, bone_2, type ="Riemannian")
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bone_4 = bone_shapes[301:400,]
bone_5 = bone_shapes[401:500,]
dist = vector()
dist[1] = procdist(bone_1, bone_2, type ="full")
dist[3] = procdist(bone_1, bone_2, type ="Riemannian")
dist[2] = procdist(bone_1, bone_2, type ="partial")
dist[4] = procdist(bone_1, bone_2, type ="sizeandshape")
dist
dist[1] = procdist(bone_1, bone_2, type ="full")
dist[2] = procdist(bone_1, bone_2, type ="partial")
dist[3] = procdist(bone_1, bone_2, type ="Riemannian")
dist[4] = procdist(bone_1, bone_2, type ="sizeandshape")
shape_proc_distance(bones, type = "full")
dist[1, 2] = = procdist(bone_1, bone_3, type ="full")
dist[1, 2] = procdist(bone_1, bone_3, type ="full")
dist = matrix(nrow = 4, ncol = 3)
dist[1, 1] = procdist(bone_1, bone_2, type ="full")
dist[1, 2] = procdist(bone_1, bone_2, type ="partial")
dist[1, 3] = procdist(bone_1, bone_2, type ="Riemannian")
dist[1, 4] = procdist(bone_1, bone_2, type ="sizeandshape")
dist[1, 1] = procdist(bone_1, bone_2, type ="full")
dist[2, 1] = procdist(bone_1, bone_2, type ="partial")
dist[3, 1] = procdist(bone_1, bone_2, type ="Riemannian")
dist[4, 1] = procdist(bone_1, bone_2, type ="sizeandshape")
dist
dist[1, 2] = procdist(bone_1, bone_3, type ="full")
dist[2, 2] = procdist(bone_1, bone_3, type ="partial")
dist[3, 2] = procdist(bone_1, bone_3, type ="Riemannian")
dist[4, 2] = procdist(bone_1, bone_3, type ="sizeandshape")
dist[1, 2] = procdist(bone_2, bone_3, type ="full")
dist[1, 2] = procdist(bone_1, bone_3, type ="full")
dist[2, 2] = procdist(bone_1, bone_3, type ="partial")
dist[3, 2] = procdist(bone_1, bone_3, type ="Riemannian")
dist[4, 2] = procdist(bone_1, bone_3, type ="sizeandshape")
dist[1, 3] = procdist(bone_2, bone_3, type ="full")
dist[2, 3] = procdist(bone_2, bone_3, type ="partial")
dist[3, 3] = procdist(bone_2, bone_3, type ="Riemannian")
dist[4, 3] = procdist(bone_2, bone_3, type ="sizeandshape")
dist
shape_proc_distance(bones, type = "full")
dist2[1,] = shape_proc_distance(bones, type = "full")
dist2[2,] = shape_proc_distance(bones, type = "partial")
dist2[3,] = shape_proc_distance(bones, type = "Riemannian")
dist2[4,] = shape_proc_distance(bones, type = "sizeandshape")
dist2 = matrix(nrow = 4, ncol = 3)
dist2[1,] = shape_proc_distance(bones, type = "full")
dist2[2,] = shape_proc_distance(bones, type = "partial")
dist2[4,] = shape_proc_distance(bones, type = "sizeandshape")
dist2[3,] = shape_proc_distance(bones, type = "Riemannian")
dist
dist2 - dist
library(help = fdasrvf)
??calc_shape_dist
calc_shape_dist(t(bone_1), t(bone_2), mode = "C")
calc_shape_dist(t(bone_1), t(bone_3), mode = "C")
calc_shape_dist(t(bone_2), t(bone_3), mode = "C")
shape_elastic_distance(bones)
matrix = matrix(1:1000, nrow = 500, ncol=2)
matrix
interval
interval = 100
index = nrow(matrix)/interval
index
factor
factor = 1:index
arr = array(matrix[1:100], dim=c(100, 2, index))
arr
arr[,,1]
for(i in 2:index){
arr[,,i] = matrix[(100 * factor[i])+1:(interval*(i+1)),]
}
mat = matrix(nrow = 12, ncol = 2)
mat
mat = matrix(data = 1:12, nrow = 12, ncol = 2)
mat
z = nrow(mat)/interval
?array
arr = array(dim = c(interval, ncol(mat), z))
arr[,,1] = mat[1:interval,]
1:interval
interval = 3
arr[,,1] = mat[1:interval,]
interval
1:interval
arr[,,1] = mat[1:interval,]
arr[,,1] = mat[,1:interval]
mat[,1:interval]
mat
arr[,,1] = mat[1:3, ]
mat[1:3]
mat[1:3][1:2]
?sample.int
mat = matrix(data = sample.int(1:100,24), nrow = 12, ncol = 2)
mat = matrix(data = sample.int(100, 24), nrow = 12, ncol = 2)
mat
interval = 3
z = nrow(mat)/interval
arr = array(dim = c(interval, ncol(mat), z))
arr
arr[,,1] = mat[1:3][1:2]
mat[1:3][1:2]
arr[,,1] = mat[1:3]
mat[1:3]
mat[1:3,]
arr[,,1] = mat[1:interval,]
arr[,,1]
z = nrow(mat)/interval
z
for(i in 2:z){
start = (i-1) * interval + 1
end = i * interval
arr[,,i] = mat[start:end,]
}
arr
mat = matrix(data = 1:24, nrow = 12, ncol = 2)
interval = 3
z = nrow(mat)/interval
arr = array(dim = c(interval, ncol(mat), z))
arr[,,1] = mat[1:interval,]
for(i in 2:z){
start = (i-1) * interval + 1
end = i * interval
arr[,,i] = mat[start:end,]
}
arr[,,1]
arr
document()
load_all()
library(shipspa)
library(shipshape)
.rs.restartR()
data_split(bone_list, 100)
data_split <- function(matrix, interval){
mat = matrix(data = 1:24, nrow = 12, ncol = 2)
interval = 3
z = nrow(mat)/interval
arr = array(dim = c(interval, ncol(mat), z))
arr[,,1] = mat[1:interval,]
for(i in 2:z){
start = (i-1) * interval + 1
end = i * interval
arr[,,i] = mat[start:end,]
}
return(arr)
}
data_split(bone_list, 100)
data_split <- function(matrix, interval){
z = nrow(mat)/interval
arr = array(dim = c(interval, ncol(mat), z))
arr[,,1] = mat[1:interval,]
for(i in 2:z){
start = (i-1) * interval + 1
end = i * interval
arr[,,i] = mat[start:end,]
}
return(arr)
}
data_split(bone_list, 100)
document()
load_all
load_all()
data_split(bone_list, 100)
document()
load_all()
data_split(bone_list, 100)
mat = bone_list
mat
mat = cbind(mat, bone_list$y)
mat
mat = bone_list$x
mat = cbind(mat, bone_list$y)
mat
bone_matrix = bone_list$x
bone_matrix = cbind(mat, bone_list$y)
data_split(bone_matrix, 100)
bone_array = data_split(bone_matrix, 100)
bone_array
document(0)
document()
check()
print(arr)
