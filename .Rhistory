bone_shapes
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_shapes
dim(bone_shapes)
bone_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bones = aperm(`dim<-`(t(bone_shapes), list(100, 2, (dim(bone_shapes)[1]/nrow(bone_shapes)))), c(2, 1, 3))
bones = aperm(`dim<-`(t(bone_shapes), list(100, 2, (dim(bone_shapes)[1]/nrow(bone_shapes)))), c(2, 1, 3))
dim(bone_shapes)[1]/nrow(bone_shapes))
dim(bone_shapes)[1]/nrow(bone_shapes)
dim(bone_shapes)[1]
id
bones = aperm(`dim<-`(t(bone_shapes), list(100, 2, 100)), c(2, 1, 3))
??calc_shape_dist
library(help = fdasrvf)
library(help = "shapes")
install.packages("lintr")
lintr::lint_package()
cl
cls
require("shape_proc_distance.R")
load("shape_proc_distance.R")
load("shape_proc_distance.R")
load("shape_proc_distance")
devtools::load_all()
warning()
warnings()
shape_elastic_distance <- function(x, mode = "C"){
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
distances[i] = fxn$d
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances)
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance <- function(x, mode = "C"){
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode)
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), "C")
distances = c(distances, fxn$dist)
distances[i] = fxn$d
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances$dist)
}
shape_elastic_distance(bones, mode = "C")
shape_elastic_distance <- function(x, mode = "C"){
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
f1 = x[,,x_ref]
f2 = x[,,y_ref]
fxn = fdasrvf:::inverse_exp_coord(t(f1), t(f2), mode)
distances[i] = fxn$d
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
return(distances)
}
shape_elastic_distance(bones, mode = "C")
shape_proc_distance(bones, type = "full")
shape_proc_distance(bones, type = "partial")
x_val
shape_proc_distance(bones, type = "Riemannian")
shape_proc_distance(bones, type = "sizeandshape")
procdist(bone_1, bone_2, type = "partial")
shape_proc_distance(bones, type = "partial")
?read.xlsx
??read.xlsx
install.packages("readxl")
library(readxl)
url = paste0("http://niti.gov.in/file/", 197, "download?token=token=x1Y_48Gj")
url
url = paste0("http://niti.gov.in/file/", 197, "download?token=x1Y_48Gj")
read.xlsx(url(url))
library(help = "readxl")
read_excel(url(url))
read_excel(url)
read.csv(url(url))
url = paste0("http://niti.gov.in/file/", 197, "/", "download?token=x1Y_48Gj")
read.csv(url(url))
url = paste0("http://niti.gov.in/file/", 195, "/", "download?token=x1Y_48Gj")
read.csv(url(url))
bone_shapes <- bone_list$x
bone_shapes <- cbind(bone_shapes, bone_list$y)
bone_1 <- bone_shapes[1:100, ]
bone_2 <- bone_shapes[101:200, ]
bone_3 <- bone_shapes[201:300, ]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
install.packages("registr")
document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
bones = bone_list
load_bones_data <- function(){
bones = bone_list
return(bones)
}
bones_shapes = load_bones_data()
bones_shapes = bones_shapes$x
devtools::document()
devtools::document()
Q
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(shipshape)
library(help = shipshape)
shape_proc_distance(bones, type = "full")
??shape_proc_distance
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
shape_proc_distance(bones)
shape_proc_distance(bone_list)
bones_shapes = bone_list$x
bone_shapes = cbind(bone_shapes, bone_list$y)
bone_1 = bone_shapes[1:100,]
bone_2 = bone_shapes[101:200,]
bone_3 = bone_shapes[201:300,]
bones = array(c(bone_1, bone_2, bone_3), dim = c(100, 2, 3))
bones
shape_proc_distance(bones)
shape_proc_distance(bones, type = "full")
Q
getAnywhere(st)
devtools::document()
devtools::install()
library(shipshape)
bone_shapes = load_bones_data()
bone_shapes = bones_shapes$x
bone_shapes
bone_shapes = bones_shapes[id==1]
bone_shapes = bones_shapes[names[1] == 1]
names[1]
names
names(bones_shapes)
bone_shapes = load_bones_data()$x
bone_shapes
bone_shapes = cbind(load_bones_data()$x, load_bones_data()$y)
bone_shapes
bone_shapes = as.matrix(load_bones_data())
bone_shapes
bone_shapes = as.numeric(as.matrix(load_bones_data()))
bone_shapes
bone_shapes = as.numeric(as.matrix(c(load_bones_data()$x, load_bones_data()$y)))
bone_shapes
bone_shapes = cbind(load_bones_data()$x, load_bones_data()$y)
bone_shapes
?split
bone_shapes = as.matrix.data.frame(load_bones_data())
bone_shapes
bones = split(bone_shapes, bone_shapes[1])
bones
bone_shapes = load_bones_data()
bone_shapes
devtools::document()
devtools::install()
load_bones_data <- function(){
bone_shapes = cbind(bone_list$x, bone_list$y)
bones <- aperm(`dim<-`(t(bone_shapes),
list(100, 2, nrow(bone_shapes)/100)), #dimensions of the 3d array
c(2,1,3))
return(bone_shapes)
}
load_bones_data()
cls
devtools::document()
devtools::install()
shape_elastic_distance(bones)
getAnywhere(load.Rdata)
library(help = miceadds)
devtools::document()
devtools::load_all()
load_bones_data()
library(help = fdasrvf)
library(R.matlab)
library(ggplot2)
diffShapes = readMat('data/DifferentSample.mat')
x2 = diffShapes$A1[1, , 1]
diffShapes = readMat('data/DifferentSample.mat')
diffShapes = readMat('c:/users/gouth/shapes/data/DifferentSample.mat')
x2 = diffShapes$A1[1, , 1]
y2 = diffShapes$A1[2, , 1]
x2
plot(x2, y2)
library(fdasrvf)
sample_shapes
sample_shapes()
?sample_shapes()
beta
plot(beta)
load("C:/Users/gouth/shapes/rdata/aligned_curves.RData")
aligned_curves
plot(aligned_curves$V1, aligned_curves$V2)
source('C:/Users/gouth/shipshape/R/data_merge.R')
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100])
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]) + 1:index*(i+1)]
}
return(arr)
}
test = data_split(bone_shapes, 100)
devtools::document()
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]) + 1:index*(i+1)]
}
return(arr)
}
test = data_split(bone_shapes, 100)
Q
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]) + 1:index*(i+1)]
}
return(arr)
}
test = data_split(bone_shapes, 100)
data_split <- function(matrix, interval){
index = nrow(matrix)/interval
factor = 1:10
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 1:index){
arr[,,i] = matrix[(100 * factor[i]):(index*(i+1)),]
}
return(arr)
}
test = data_split(bone_shapes, 100)
?matrix
matrix = matrix(1:1000, nrow = 500, ncol=2)
matrix
interval = 100
index = nrow(matrix)/interval
index
factor = 1:10
factor = 1:index
arr = array(matrix[1:100], dim=c(100, 2, index))
arr
interval = 100
index = nrow(matrix)/interval
factor = 1:index
arr = array(matrix[1:100], dim=c(100, 2, index))
for(i in 2:index){
arr[,,i] = matrix[(100 * factor[i])+1:(interval*(i+1)),]
}
arr[,,1]
matrix
devtools::document()
devtools::load_all()
devtools::install_github("/goutham1220/shipshape")
devtools::install_github("goutham1220/shipshape")
library(devtools)
check()
getAnywhere(inverse_exp_coord())
devtools::document()
install()
check()
document()
document()
getAnywhere(inverse_exp_coord())
getAnywhere(inverse_exp_coord())[2]
document()
install()
check()
document()
load_all()
install()
.GlobalEnv
check()
document()
install()
check()
document
document()
install()
install()
install(shipshape)
install("shipshape")
library(devtools)
document()
install.packages("devtools")
library("devtools")
installed.packages()
remove.packages("devtools")
installed.packages("devtools")
install.packages("devtools")
library(devtools)
loadNamespace()
loadedNamespaces
?loadNamespace
library(base)
library(help = base)
remove.packages("base")
installed.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
library("base")
devtools::document()
remove.packages("processx")
install.packages("processx")
install.packages("processx")
library(devtools)
install.packages("devtools", dependencies = TRUE)
library(devtools)
loadedNamespaces(processx)
?loadNamespace()
loadNamespace("processx", versionCheck = 3.2.1)
remove.packages("processx")
library(help = processx)
install.packages
install.packages("processx")
install.packages("processx")
library(devtools)
document()
install.packages("shapes")
document()
rlang::last_error()
library(help = shapes)
install()
check()
document()
check()
document()
install()
check(0)
check()
??repmat
getAnywhere("repmat")
getAnywhere("repmat")[1]
getAnywhere("repmat")[2]
document()
install()
check()
document()
install()
check()
document()
install()
check()
document()
install()
check()
remove.packages("shapes", "fdasrvf")
remove.packages("fdasrvf")
library("shapes")
remove.packages("shapes")
library(shapes)
library("shapes")
library(help = "shapes")
library("fdasrvf")
library("shapes")
document()
install()
check()
document(0)
document()
install()
check()
document()
?document
document()
document()
document()
document()
install()
check()
document()
install()
check()
document()
install()
check()
document()
install()
check()
shape_elastic_distance(bone_1, bone_2)
library(shipshape)
document()
library(devtools)
document()
install()
shape_proc_distance(bones)
document()
install()
check()
getanywhere("centroid.size")
install.packages("shapes")
shapes:::centroid.size
document()
remove.packages
remove.packages("shapes")
install()
shape_proc_distance(bones)
check()
shape_elastic_distance(bones)
shape_elastic_distance(bones)
document()
shape_elastic_distance(bones)
shape_proc_distance(bones)
library(shapes)
library("usethis")
use_appveyor()
install.packages("wosr")
install.packages("covr")
library("covr")
package_coverage()
package_coverage(type = "all")
library(shipshape)
shape_proc_distance(bones, type = "full")
shape_proc_distance(bones, type = "partial")
Q
??riemdist
getAnywhere("riemdist")
library(shapes)
library("shapes")
install.packages("shapes")
getAnywhere("riemdist")
library(shapes)
riemdist
library(help = shapes)
bone_1[1:100,]
bone_1[1]
bone_1[1:100]
bone_1[][1:100]
bone_1[101:200]
procdist(bone_1, bone_2, type = "partial")
procdist
?procdist
shape_proc_distance(bones, type = "Riemannian")
shape_proc_distance(bones, type = "sizeandshape")
procdist(bone_1, bone_2, type = "sizeandshape")
procdist(bone_2, bone_1, type = "sizeandshape")
shape_proc_distance(bones, type = "partial")
getAnywhere("realtocomplex")
getAnywhere("realtocomplex")[1]
bones[1,]
bones[,2]
bones
riemdist = getFromNamespace("riemdist", "shapes")
ssriemdist = getFromNamespace("ssriemdist", "shapes")
distances = vector()
for(i in 1:dim(x)[3]){
x_ref = combn(dim(x)[3], 2)[1,i]
y_ref = combn(dim(x)[3], 2)[2,i]
x_val <- x[,,x_ref]
y_val <- x[,,y_ref]
if (type == "full") {
distances[i] = sin(riemdist(x_val, y_val, reflect = reflect))
}
if (type == "partial") {
distances[i] <- sqrt(2) * sqrt(abs(1 - cos(riemdist(x_val, y_val, reflect = reflect))))
}
if (type == "Riemannian") {
distances[i] <- riemdist(x_val, y_val, reflect = reflect)
}
if (type == "sizeandshape") {
distances[i] <- ssriemdist(x_val, y_val, reflect = reflect)
}
names(distances)[i] = paste(x_ref, y_ref, sep = " ")
}
x_ref = combn(dim(bones)[3], 2)[1,i]
y_ref = combn(dim(bones)[3], 2)[2,i]
x_ref
y_ref
x_val <- x[,,x_ref]
x_val <- bones[,,x_ref]
x_val
riemdist
realtocomplex
bone_1[,1]
bone_1[,2]
procdist(bone_1, bone_2, type = "partial")
shape_proc_distance(bones, type = "partial")
?procGPA
riemdist
realtocomplex
realtocomplex(bone_1)
remove.packages("shapes")
devtools::load_all()
shape_proc_distance(bones, type = "partial", reflect = TRUE)
